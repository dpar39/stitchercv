cmake_minimum_required(VERSION 3.2.0)

set(MODULE_NAME stitcher)
project(${MODULE_NAME} CXX)
set(LIB_NAME  lib${MODULE_NAME})
set(APP_NAME  ${MODULE_NAME}_app)
set(TEST_NAME ${MODULE_NAME}_test)

enable_language(CXX)

message(STATUS "-------- CMake for module ${MODULE_NAME} --------")

if (CMAKE_SIZEOF_VOID_P MATCHES "4")
    set(ARCH_NAME "x86")
else()
    set(ARCH_NAME "x64")
endif()
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_TYPE)
string(TOLOWER ${CMAKE_SYSTEM_NAME} SYSTEM_NAME)
set(BUILD_NAME_SUFFIX ${SYSTEM_NAME}_${BUILD_TYPE}_${ARCH_NAME} )

#----------------------------
# Third party dependencies
#----------------------------
set(THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty)

set(CMAKE_CXX_STANDARD 17)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(OpenCV_STATIC ON)

if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /wd4834")
    foreach(FLAG_VAR CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
        if(${FLAG_VAR} MATCHES "/MD")
            string(REGEX REPLACE "/MD" "/MT" ${FLAG_VAR} "${${FLAG_VAR}}")
        endif()
    endforeach()
    add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING -D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
endif()
if(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    set(CMAKE_MACOSX_RPATH 1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fPIC -fexceptions -pthread")
    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -fPIC -fexceptions -pthread")
endif()
add_definitions(-DDLLEXPORT)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
set(OpenCV_DIR ${THIRD_PARTY_DIR}/install_${BUILD_NAME_SUFFIX})


if(EXISTS ${OpenCV_DIR}/share/OpenCV/OpenCVConfig.cmake)
    set(OpenCV_DIR ${OpenCV_DIR}/share/OpenCV)
elseif(EXISTS ${OpenCV_DIR}/lib/cmake/opencv4/OpenCVConfig.cmake)
    set(OpenCV_DIR ${OpenCV_DIR}/lib/cmake/opencv4/)
endif()
message(STATUS "Setting OpenCV_DIR=${OpenCV_DIR}")

# Find OpenCV Library
find_package(OpenCV REQUIRED)

#-----------------------------
# Build the module library
#-----------------------------
file(GLOB LIB_CPP_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
file(GLOB LIB_INC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")

set(MODULE_INC_DIRS
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${OpenCV_INCLUDE_DIRS}
    ${THIRD_PARTY_DIR}
)

set(MODULE_LIB_DEPS
    ${OpenCV_LIBS}
    ${OPENCV_3RDPARTY_LIBS}
)

include_directories(${MODULE_INC_DIRS})
add_library(${LIB_NAME} STATIC ${LIB_CPP_FILES} ${LIB_INC_FILES})
set_target_properties(${LIB_NAME} PROPERTIES LINKER_LANGUAGE CXX)
target_link_libraries(${LIB_NAME} ${MODULE_LIB_DEPS})
install(TARGETS ${LIB_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX})

#-----------------------------
# Unit tests for the library
#-----------------------------
set(GTest_DIR ${THIRD_PARTY_DIR}/install_${BUILD_NAME_SUFFIX})
set(GTest_INCLUDE_DIRS ${GTest_DIR}/include)
set(DEBUG_SUFFIX "")
if(${BUILD_TYPE} STREQUAL debug)
    set(DEBUG_SUFFIX "d")
endif()
if (MSVC)
    set(GTest_LIBRARIES ${GTest_DIR}/lib/gtest${DEBUG_SUFFIX}.lib ${GTest_DIR}/lib/gmock${DEBUG_SUFFIX}.lib)
else()
    set(GTest_LIBRARIES ${GTest_DIR}/lib/libgtest${DEBUG_SUFFIX}.a ${GTest_DIR}/lib/gmock${DEBUG_SUFFIX}.a)
endif()

if (UNIX) # Boost library for non C++17 compiler that provide filesystem
    find_package(Boost REQUIRED COMPONENTS system filesystem)
endif()

file(GLOB TEST_SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp")
file(GLOB TEST_INC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/test/*.h")

set(TEST_INC_DIRS
    ${MODULE_INC_DIRS}
    ${GTest_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS}
)
set(TEST_LIB_DEPS
    ${MODULE_LIB_DEPS}
    ${LIB_NAME}
    ${Boost_LIBRARIES}
    ${GTest_LIBRARIES}
)

add_executable(${TEST_NAME} ${TEST_SRC_FILES}  ${TEST_INC_FILES})
target_include_directories(${TEST_NAME} PUBLIC ${TEST_INC_DIRS})
target_link_libraries(${TEST_NAME} ${TEST_LIB_DEPS})
install(TARGETS ${TEST_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX})

#-----------------------------
# Command line app
#-----------------------------
file(GLOB APP_SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/app/*.cpp")
file(GLOB APP_INC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/app/*.h")
set(APP_INC_DIRS
    ${MODULE_INC_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}/app
)
set(APP_LIB_DEPS
    ${MODULE_LIB_DEPS}
    ${LIB_NAME}
)

add_executable(${APP_NAME} ${APP_SRC_FILES} ${APP_INC_FILES})
target_include_directories(${APP_NAME} PUBLIC ${APP_INC_DIRS})
target_link_libraries(${APP_NAME} ${APP_LIB_DEPS})
install(TARGETS ${APP_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX})
